{
  "name": "convex-bot",
  "slug": "convex-bot",
  "title": "Convex DB Agent",
  "icon": "🏃",
  "description": "Agent for Convex database development. Provides schema design patterns, query examples, and Convex documentation.",
  "longDescription": "Agent that helps with Convex database development. Includes documentation for Convex patterns, code examples for queries and mutations, and MCP commands for database interaction.",
  "category": "database",
  "author": "agent-tree",
  "version": "1.0.0",
  "license": "MIT",
  "features": [
    "Convex schema design patterns",
    "Query and mutation code examples",
    "Authentication implementation patterns",
    "MCP commands for database interaction",
    "Git worktree workflow for multi-agent development",
    "Convex documentation and reference materials"
  ],
  "whenToUse": "Use when working with Convex functions, database schema design, or need Convex code examples.",
  "installation": "Run `npx agent-tree convex-bot` to install, then use `/convex-bot` in Claude Code.",
  "usage": "Type `/convex-bot` in Claude Code to activate. Use *help to see available commands.",
  "npxCommand": "npx agent-tree convex-bot",
  "commands": [
    {
      "name": "help",
      "description": "Show numbered list of available commands for selection",
      "usage": "*help",
      "examples": ["*help - Display all available commands"]
    },
    {
      "name": "start-work",
      "description": "Execute the start-to-finish workflow",
      "usage": "*start-work",
      "examples": ["*start-work - Begin workflow"]
    },
    {
      "name": "list-work",
      "description": "Show work status and available tasks",
      "usage": "*list-work",
      "examples": ["*list-work - Show work status"]
    },
    {
      "name": "exit",
      "description": "Deactivate convex-bot agent",
      "usage": "*exit",
      "examples": ["*exit - Deactivate convex-bot agent"]
    }
  ],
  "workflows": [
    {
      "name": "start-to-finish",
      "description": "Workflow from setup to deployment",
      "steps": [
        "Load and read the active-context",
        "Sign in and declare active work",
        "Advise user to commit local work and offer assistance",
        "Run start-work task to create isolated work environment",
        "Navigate to worktree directory and plan solution",
        "Solve the task",
        "Inform user of success",
        "Update active-context with work item state",
        "Run finish-work task to finalize and cleanup"
      ],
      "prerequisites": ["Clean git working tree", "Convex MCP server connected"]
    }
  ],
  "tasks": [
    {
      "name": "start-work",
      "description": "Create isolated Git worktree for agent development work",
      "filePath": "tasks/start-work.md",
      "category": "setup"
    },
    {
      "name": "finish-work",
      "description": "Safely publish results and clean up worktree environment",
      "filePath": "tasks/finish-work.md",
      "category": "cleanup"
    }
  ],
  "scripts": [
    {
      "name": "list_work",
      "description": "Show work session status with branch information",
      "command": "chmod +x agent-tree/convex-bot/scripts/list_work.sh && agent-tree/convex-bot/scripts/list_work.sh",
      "filePath": "scripts/list_work.sh"
    }
  ],
  "documentation": {
    "readme": "Guide covering installation, usage, commands, workflows, and Convex patterns for subscriptions, updates, file storage, and background jobs.",
    "manuals": [
      {
        "name": "convex-docs",
        "description": "Convex documentation with patterns, TypeScript examples, querying, CRUD utilities, triggers, functions, security, file storage, HTTP endpoints, and validation",
        "filePath": "manuals/convex-docs.md",
        "content": "Convex development guidelines covering authentication, function syntax, TypeScript validation, querying, pagination, indexing, search, CRUD operations, triggers, functions, security, file storage, HTTP endpoints, validation, rate limiting, migrations, retries, and sessions"
      }
    ],
    "guides": [
      {
        "title": "Convex Schema Design",
        "description": "Structure Convex database with TypeScript types and validators",
        "steps": [
          "Define schemas with proper TypeScript types",
          "Use validators for runtime type safety",
          "Implement proper error handling in mutations",
          "Optimize queries with appropriate indexes",
          "Use Convex Auth for authentication when possible"
        ],
        "category": "setup"
      },
      {
        "title": "Real-time Query Optimization",
        "description": "Optimize Convex queries",
        "steps": [
          "Use useQuery with proper caching",
          "Implement optimistic updates with useMutation",
          "Leverage indexed queries over filtering",
          "Keep sync engine functions light and fast",
          "Use pagination for large datasets"
        ],
        "category": "advanced"
      },
      {
        "title": "Multi-agent Development Workflow",
        "description": "Multi-agent development using Git worktrees",
        "steps": [
          "Create isolated worktree for your work",
          "Coordinate through active-context.md",
          "Never delete other agents' work",
          "Update shared state only in main branch",
          "Clean up worktree when finished"
        ],
        "category": "usage"
      }
    ],
    "api": "Convex MCP commands for deployment status, table management, function execution, and environment variable handling"
  },
  "examples": [
    {
      "title": "Canonical Query with Authentication",
      "description": "Authenticated query pattern",
      "code": "export const getById = query({\n  args: { _id: v.id(\"divisions\") },\n  returns: v.any(),\n  handler: async (ctx, args) => {\n    const identity = await ctx.auth.getUserIdentity();\n    if (!identity) throw new Error(\"Not authenticated\");\n    return await ctx.db.get(args._id);\n  },\n});",
      "language": "typescript",
      "category": "basic"
    },
    {
      "title": "Canonical Mutation with Validation",
      "description": "Authenticated mutation pattern",
      "code": "export const create = mutation({\n  args: { divisionName: v.string() },\n  returns: v.null(),\n  handler: async (ctx, args) => {\n    const identity = await ctx.auth.getUserIdentity();\n    if (!identity) throw new Error(\"Not authenticated\");\n    await ctx.db.insert(\"divisions\", { divisionName: args.divisionName });\n    return null;\n  },\n});",
      "language": "typescript",
      "category": "basic"
    },
    {
      "title": "Advanced Filtering with Indexes",
      "description": "Using indexes for querying",
      "code": "export const getByLeagueId = query({\n  args: { leagueId: v.id(\"leagues\") },\n  returns: v.array(v.any()),\n  handler: async (ctx, args) => {\n    const identity = await ctx.auth.getUserIdentity();\n    if (!identity) throw new Error(\"Not authenticated\");\n    return await ctx.db\n      .query(\"divisions\")\n      .withIndex(\"by_league_id\", (q) => q.eq(\"leagueId\", args.leagueId))\n      .collect();\n  },\n});",
      "language": "typescript",
      "category": "advanced"
    }
  ],
  "codeSnippets": [
    {
      "title": "Schema Definition with Indexes",
      "description": "Convex schema with indexes",
      "code": "export default defineSchema({\n  divisions: defineTable({\n    divisionName: v.string(),\n    leagueId: v.id(\"leagues\"),\n    createdBy: v.string(),\n  }).index(\"by_league_id\", [\"leagueId\"])\n    .index(\"by_created_by\", [\"createdBy\"]),\n});",
      "language": "typescript",
      "tags": ["schema", "indexes", "database"]
    },
    {
      "title": "Pagination with Filters",
      "description": "Pagination with filter helper",
      "code": "export const postsWithTag = query({\n  args: { tag: v.string(), paginationOpts: paginationOptsValidator },\n  returns: v.any(),\n  handler: (ctx, args) => {\n    return filter(\n      ctx.db.query(\"posts\"),\n      (post) => post.tags.includes(args.tag),\n    ).paginate(args.paginationOpts);\n  },\n});",
      "language": "typescript",
      "tags": ["pagination", "filtering", "queries"]
    },
    {
      "title": "Row-Level Security Setup",
      "description": "Row-level security setup",
      "code": "async function rlsRules(ctx) {\n  const identity = await ctx.auth.getUserIdentity();\n  return {\n    users: {\n      read: async (_, user) => !!identity,\n      modify: async (_, user) => identity && user.tokenIdentifier === identity.tokenIdentifier,\n      insert: async () => true,\n    },\n  } satisfies Rules<typeof ctx, DataModel>;\n}",
      "language": "typescript",
      "tags": ["security", "authentication", "access-control"]
    }
  ],
  "mcpCommands": [
    {
      "name": "convex:status",
      "description": "Query available deployments and get deployment selector",
      "category": "deployment",
      "usage": "convex:status",
      "example": "Check current deployment status and available environments"
    },
    {
      "name": "convex:tables",
      "description": "List all tables with schemas and metadata",
      "category": "tables",
      "usage": "convex:tables",
      "example": "View all database tables and their structure"
    },
    {
      "name": "convex:data",
      "description": "Paginate through documents in a table",
      "category": "tables",
      "usage": "convex:data [tableName]",
      "example": "Browse documents in the users table"
    },
    {
      "name": "convex:runOneoffQuery",
      "description": "Execute sandboxed JavaScript queries (read-only)",
      "category": "tables",
      "usage": "convex:runOneoffQuery [query]",
      "example": "Run a one-time query to analyze data"
    },
    {
      "name": "convex:functionSpec",
      "description": "Get metadata about all deployed functions",
      "category": "functions",
      "usage": "convex:functionSpec",
      "example": "List all available queries, mutations, and actions"
    },
    {
      "name": "convex:run",
      "description": "Execute deployed Convex functions with provided arguments",
      "category": "functions",
      "usage": "convex:run [functionName] [args]",
      "example": "Execute a specific function with test data"
    },
    {
      "name": "convex:envList",
      "description": "List all environment variables",
      "category": "environment",
      "usage": "convex:envList",
      "example": "View all configured environment variables"
    },
    {
      "name": "convex:envGet",
      "description": "Get specific environment variable value",
      "category": "environment",
      "usage": "convex:envGet [varName]",
      "example": "Retrieve the value of OPENAI_API_KEY"
    },
    {
      "name": "convex:envSet",
      "description": "Set or update environment variable",
      "category": "environment",
      "usage": "convex:envSet [varName] [value]",
      "example": "Update API key or configuration value"
    },
    {
      "name": "convex:envRemove",
      "description": "Remove environment variable",
      "category": "environment",
      "usage": "convex:envRemove [varName]",
      "example": "Delete an unused environment variable"
    }
  ],
  "dependencies": ["convex", "convex-helpers"],
  "requiredSetup": [
    {
      "title": "Convex MCP Server",
      "description": "Connect to Convex database via MCP for direct database interaction",
      "command": "npx -y convex@latest mcp start",
      "verification": "Test MCP connection with convex:status command",
      "optional": false
    },
    {
      "title": "Clean Git Working Tree",
      "description": "Ensure no uncommitted changes before creating worktrees",
      "command": "git status",
      "verification": "Working tree should be clean with no staged changes",
      "optional": false
    },
    {
      "title": "Convex Project Setup",
      "description": "Initialize or connect to existing Convex project",
      "command": "npx convex dev",
      "verification": "Convex dashboard should be accessible",
      "optional": true
    }
  ],
  "files": [
    "README.md",
    "manuals/convex-docs.md",
    "scripts/list_work.sh",
    "tasks/start-work.md",
    "tasks/finish-work.md",
    "workflows/start-to-finish.md"
  ],
  "fileStructure": [
    {
      "name": "convex-bot",
      "type": "directory",
      "path": "agent-tree/convex-bot",
      "description": "Root directory for convex-bot agent",
      "children": [
        {
          "name": "README.md",
          "type": "file",
          "path": "agent-tree/convex-bot/README.md",
          "description": "Agent overview, features, and usage documentation"
        },
        {
          "name": "manuals",
          "type": "directory",
          "path": "agent-tree/convex-bot/manuals",
          "description": "Reference documentation and guides",
          "children": [
            {
              "name": "convex-docs.md",
              "type": "file",
              "path": "agent-tree/convex-bot/manuals/convex-docs.md",
              "description": "Comprehensive Convex production helper documentation"
            }
          ]
        },
        {
          "name": "scripts",
          "type": "directory",
          "path": "agent-tree/convex-bot/scripts",
          "description": "Utility scripts for work management",
          "children": [
            {
              "name": "list_work.sh",
              "type": "file",
              "path": "agent-tree/convex-bot/scripts/list_work.sh",
              "description": "Enhanced work session status script with formatting"
            }
          ]
        },
        {
          "name": "tasks",
          "type": "directory",
          "path": "agent-tree/convex-bot/tasks",
          "description": "Individual task definitions",
          "children": [
            {
              "name": "start-work.md",
              "type": "file",
              "path": "agent-tree/convex-bot/tasks/start-work.md",
              "description": "Create isolated Git worktree for development work"
            },
            {
              "name": "finish-work.md",
              "type": "file",
              "path": "agent-tree/convex-bot/tasks/finish-work.md",
              "description": "Safely publish results and clean up worktree"
            }
          ]
        },
        {
          "name": "workflows",
          "type": "directory",
          "path": "agent-tree/convex-bot/workflows",
          "description": "Multi-step processes and workflows",
          "children": [
            {
              "name": "start-to-finish.md",
              "type": "file",
              "path": "agent-tree/convex-bot/workflows/start-to-finish.md",
              "description": "Complete Convex implementation workflow"
            }
          ]
        }
      ]
    }
  ],
  "created": "2024-01-01",
  "updated": "2025-07-01",
  "downloads": 0,
  "stars": 0,
  "persona": {
    "role": "Convex database development assistant",
    "style": "Task-oriented, efficient, precise",
    "identity": "Developer who works with Convex database",
    "focus": "Using documentation, Convex MCP for database interaction, multi-agent coordination through worktrees, maintaining work load and active context",
    "coreGuidelines": [
      "Never delete another agent's comments, work or notes",
      "Only edit ACTIVE_CONTEXT or WORK_LOAD documents in main branch, never in worktree",
      "Use Serena MCP for codebase analysis when USE_SERENA_MCP is true",
      "Only change ACTIVE_CONTEXT in sections directly referencing the agent by full name",
      "Question users to clarify problems and plans before thinking deeply",
      "Reference documentation",
      "Provide installation help for Convex MCP with 'npx -y convex@latest mcp start'"
    ]
  },
  "systemDocumentation": [
    "SYSTEM_DOCS - Architecture documentation referenced in agent-tree-config.md",
    "PRD - Product requirements document for current project context",
    "ACTIVE_CONTEXT - Shared state and coordination between agents"
  ],
  "coreReferences": [
    "agent-tree/agent-tree-config.md - Global variables and configuration",
    "agent-tree/active-context.md - Agent coordination and shared state",
    "manuals/convex-docs.md - Convex documentation and patterns"
  ]
}