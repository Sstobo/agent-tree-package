{
  "name": "servitor",
  "slug": "servitor",
  "title": "Project Management Agent",
  "icon": "🏃",
  "description": "Agent for project management and agent coordination. Manages git state, project health monitoring, and multi-agent workflows.",
  "longDescription": "Agent that manages git worktrees, coordinates multiple agents, monitors project health, and executes workflows. Provides project status dashboards and oversees development processes.",
  "category": "management",
  "author": "agent-tree",
  "version": "1.0.0",
  "license": "MIT",
  "features": [
    "Git worktree management for isolated agent workspaces",
    "Multi-agent task coordination",
    "Project health monitoring and status dashboards",
    "Automated workflow execution",
    "Git state management",
    "Active context tracking"
  ],
  "whenToUse": "Use when you need project oversight, agent coordination, git worktree management, or project health monitoring.",
  "installation": "Run `npx agent-tree servitor` to install, then use `/servitor` in Claude Code.",
  "usage": "Type `/servitor` in Claude Code to activate. Use *help to see available commands.",
  "npxCommand": "npx agent-tree servitor",
  "commands": [
    {
      "name": "help",
      "description": "Show numbered list of available commands for selection",
      "usage": "*help",
      "examples": ["*help - Display all available commands"]
    },
    {
      "name": "start-to-finish",
      "description": "Execute the start-to-finish workflow",
      "usage": "*start-to-finish",
      "examples": ["*start-to-finish - Begin complete workflow"]
    },
    {
      "name": "status",
      "description": "Show project status dashboard with git state and agent activity",
      "usage": "*status",
      "examples": ["*status - Display project status dashboard"]
    },
    {
      "name": "list-work",
      "description": "Show work overview with epics, tasks, and progress",
      "usage": "*list-work",
      "examples": ["*list-work - Display work overview dashboard"]
    },
    {
      "name": "exit",
      "description": "Deactivate servitor agent",
      "usage": "*exit",
      "examples": ["*exit - Deactivate servitor agent"]
    }
  ],
  "workflows": [
    {
      "name": "start-to-finish",
      "description": "Complete workflow from task selection to completion",
      "steps": [
        "Load and read the active-context",
        "Sign in and declare active work",
        "Advise user to commit local work and offer assistance",
        "Run start-work task to create work environment",
        "Navigate to worktree directory and plan solution",
        "Solve the task",
        "Inform user of success",
        "Update active-context with work item state",
        "Run finish-work task to finalize cleanup"
      ],
      "prerequisites": ["Clean git working tree", "Access to active-context.md"]
    },
    {
      "name": "health",
      "description": "Project health check workflow",
      "steps": [
        "Run npx convex dev and spin off convex-bot agent",
        "Run npm run dev and solve any bugs or errors",
        "Run npm run build and solve any bugs or errors",
        "Report results to user"
      ],
      "prerequisites": ["Node.js environment", "Convex project setup"]
    }
  ],
  "tasks": [
    {
      "name": "status",
      "description": "Generate ASCII dashboard showing git status, active agents, worktrees, and system health",
      "filePath": "tasks/status.md",
      "category": "management"
    },
    {
      "name": "list-work",
      "description": "Analyze PRD, active context, and work load to provide compact work overview dashboard",
      "filePath": "tasks/list-work.md",
      "category": "management"
    },
    {
      "name": "start-work",
      "description": "Create isolated Git worktree for agent development work",
      "filePath": "tasks/start-work.md",
      "category": "setup"
    },
    {
      "name": "finish-work",
      "description": "Safely publish results and clean up worktree environment",
      "filePath": "tasks/finish-work.md",
      "category": "cleanup"
    }
  ],
  "scripts": [],
  "documentation": {
    "readme": "Guide covering installation, usage, commands, workflows, git worktree management, and multi-agent coordination patterns.",
    "manuals": [
      {
        "name": "convex-docs",
        "description": "Convex documentation for reference when coordinating with Convex-related agents",
        "filePath": "manuals/convex-docs.md",
        "content": "Convex development guidelines for coordinating development work with other agents"
      }
    ],
    "guides": [
      {
        "title": "Git Worktree Management",
        "description": "Manage isolated workspaces for different agents",
        "steps": [
          "Create worktrees for agent isolation",
          "Track agent activity across branches",
          "Monitor worktree health and status",
          "Clean up completed worktrees",
          "Coordinate multi-agent development"
        ],
        "category": "setup"
      },
      {
        "title": "Project Health Monitoring",
        "description": "Monitor project status and identify issues",
        "steps": [
          "Check git status for uncommitted changes",
          "Validate TypeScript compilation",
          "Run linting and build processes",
          "Monitor agent activity and progress",
          "Generate status dashboards"
        ],
        "category": "usage"
      },
      {
        "title": "Multi-Agent Coordination",
        "description": "Coordinate multiple agents working on the same project",
        "steps": [
          "Track active agents and their tasks",
          "Manage shared context and communication",
          "Prevent conflicts between agent work",
          "Coordinate task handoffs and completion",
          "Maintain project-wide visibility"
        ],
        "category": "advanced"
      }
    ],
    "api": "Git commands, project health checks, and agent coordination through active-context.md"
  },
  "examples": [
    {
      "title": "Project Status Dashboard",
      "description": "ASCII dashboard showing git status, agents, and worktrees",
      "code": "╭─────────────────────────────────────────╮\n│          🤖 AI AGENT CONTROL CENTER      │\n├─────────────────────────────────────────┤\n│  MAIN BRANCH:     [🟢] main (clean)     │\n│  GIT STATUS:      [🟢] No changes       │\n│  ACTIVE AGENTS:   [🟢] 2 agents working │\n│  WORKTREES:       [🟢] 2 active         │\n╰─────────────────────────────────────────╯",
      "language": "text",
      "category": "basic"
    },
    {
      "title": "Work Overview Dashboard",
      "description": "Compact work dashboard with epics and progress",
      "code": "# 📊 WORK OVERVIEW\n\n## 🎯 STATUS\n- **Health:** A- | **Agents:** 2 active\n- **Just Completed:** Convex best practices review\n\n## 🔥 NEXT (1-2 weeks)\n1. User auth - Auth Epic - 3 days\n2. File upload - Storage Epic - 5 days\n\n## 📋 EPIC PROGRESS\nAuth Epic: ████████░░ 80% (4/5 stories)\nStorage Epic: ██░░░░░░░░ 20% (1/5 stories)",
      "language": "text",
      "category": "basic"
    }
  ],
  "codeSnippets": [
    {
      "title": "Git Status Check",
      "description": "Check git status and branch information",
      "code": "# Check git status\ngit status\n\n# List all branches including agent branches\ngit branch -a\n\n# Check for active worktrees\ngit worktree list",
      "language": "bash",
      "tags": ["git", "status", "worktrees"]
    },
    {
      "title": "Health Check Commands",
      "description": "Run project health checks",
      "code": "# TypeScript compilation check\nnpx tsc --noEmit\n\n# Run linting\nnpm run lint\n\n# Build check\nnpm run build\n\n# Convex development mode\nnpx convex dev",
      "language": "bash",
      "tags": ["health", "build", "lint"]
    }
  ],
  "mcpCommands": [],
  "dependencies": [],
  "requiredSetup": [
    {
      "title": "Git Repository",
      "description": "Project must be a git repository for worktree management",
      "command": "git status",
      "verification": "Should show git repository status",
      "optional": false
    },
    {
      "title": "Node.js Project",
      "description": "Project should have package.json for health checks",
      "command": "npm --version",
      "verification": "Node.js and npm should be available",
      "optional": true
    },
    {
      "title": "Active Context File",
      "description": "agent-tree/active-context.md for agent coordination",
      "verification": "File should exist for multi-agent coordination",
      "optional": true
    }
  ],
  "files": [
    "README.md",
    "manuals/convex-docs.md",
    "tasks/status.md",
    "tasks/list-work.md",
    "tasks/start-work.md",
    "tasks/finish-work.md",
    "workflows/health.md",
    "workflows/start-to-finish.md"
  ],
  "fileStructure": [
    {
      "name": "servitor",
      "type": "directory",
      "path": "agent-tree/servitor",
      "description": "Root directory for servitor agent",
      "children": [
        {
          "name": "README.md",
          "type": "file",
          "path": "agent-tree/servitor/README.md",
          "description": "Agent overview and usage documentation"
        },
        {
          "name": "manuals",
          "type": "directory",
          "path": "agent-tree/servitor/manuals",
          "description": "Reference documentation",
          "children": [
            {
              "name": "convex-docs.md",
              "type": "file",
              "path": "agent-tree/servitor/manuals/convex-docs.md",
              "description": "Convex documentation for coordination reference"
            }
          ]
        },
        {
          "name": "tasks",
          "type": "directory",
          "path": "agent-tree/servitor/tasks",
          "description": "Individual task definitions",
          "children": [
            {
              "name": "status.md",
              "type": "file",
              "path": "agent-tree/servitor/tasks/status.md",
              "description": "Generate project status dashboard"
            },
            {
              "name": "list-work.md",
              "type": "file",
              "path": "agent-tree/servitor/tasks/list-work.md",
              "description": "Generate work overview dashboard"
            },
            {
              "name": "start-work.md",
              "type": "file",
              "path": "agent-tree/servitor/tasks/start-work.md",
              "description": "Create isolated Git worktree"
            },
            {
              "name": "finish-work.md",
              "type": "file",
              "path": "agent-tree/servitor/tasks/finish-work.md",
              "description": "Clean up worktree environment"
            }
          ]
        },
        {
          "name": "workflows",
          "type": "directory",
          "path": "agent-tree/servitor/workflows",
          "description": "Multi-step workflow processes",
          "children": [
            {
              "name": "health.md",
              "type": "file",
              "path": "agent-tree/servitor/workflows/health.md",
              "description": "Project health check workflow"
            },
            {
              "name": "start-to-finish.md",
              "type": "file",
              "path": "agent-tree/servitor/workflows/start-to-finish.md",
              "description": "Complete task workflow"
            }
          ]
        }
      ]
    }
  ],
  "created": "2024-01-01",
  "updated": "2025-07-01",
  "downloads": 0,
  "stars": 0,
  "persona": {
    "role": "Project management and agent coordination assistant",
    "style": "Task-oriented, efficient, precise",
    "identity": "Developer who manages git state, project health, and agent status",
    "focus": "Overseeing codebase, providing project and git status updates, coordinating multi-agent workflows",
    "coreGuidelines": [
      "Never delete another agent's comments, work or notes",
      "Only edit ACTIVE_CONTEXT or WORK_LOAD documents in main branch, never in worktree",
      "Question users to clarify problems and plans before thinking deeply",
      "Use Serena MCP for codebase analysis when available"
    ]
  },
  "systemDocumentation": [
    "SYSTEM_DOCS - Architecture documentation referenced in agent-tree-config.md",
    "PRD - Product requirements document for project context",
    "ACTIVE_CONTEXT - Shared state and coordination between agents"
  ],
  "coreReferences": [
    "agent-tree/agent-tree-config.md - Global variables and configuration",
    "agent-tree/active-context.md - Agent coordination and shared state",
    "docs/PRD.md - Product requirements and epics",
    "docs/epics/ - Current epic status and work load"
  ]
}